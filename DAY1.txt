QUESTI0N 1:
(a):
Start
Class Pet
    Attributes: name, age
    Constructor(name, age)
    Method displayInfo()

Class Dog inherits Pet
    Attribute: breed
    Constructor(name, age, breed)
    Override displayInfo()

Class Cat inherits Pet
    Attribute: color
    Constructor(name, age, color)
    Override displayInfo()

Class Bird inherits Pet
    Attribute: wingspan
    Constructor(name, age, wingspan)
    Override displayInfo()

Main:
    Create Dog, Cat, Bird objects
    Call displayInfo() for each
end


(b)
Start
Class Member
    Attributes: name, id, membershipDate
    Constructor(name, id, membershipDate)
    Method checkMembershipValidity()
        IF currentDate - membershipDate < 1 year
            RETURN "Valid"
        ELSE
            RETURN "Expired"

Main:
    Create Member objects
    Call checkMembershipValidity()
end


QUESTION 2
(a):
Start
Initialize Stack undoStack

Function performOperation(operation)
    Push operation onto undoStack

Function undoOperation()
    IF undoStack is not empty
        operation = Pop from undoStack
        Revert operation
    ELSE
        Print "Nothing to undo"
end
(b):
Start
Initialize Queue normalQueue
Initialize Queue emergencyQueue

Function addCustomer(customer, priority)
    IF priority == "emergency"
        Enqueue customer in emergencyQueue
    ELSE
        Enqueue customer in normalQueue

Function serveCustomer()
    IF emergencyQueue not empty
        Dequeue from emergencyQueue
    ELSE IF normalQueue not empty
        Dequeue from normalQueue
    ELSE
        Print "No customers waiting"
end

QUESTION 3:
(1):
START

CREATE HashMap studentScores

ADD ("Alice", 85) to studentScores
ADD ("Bob", 92) to studentScores
ADD ("Charlie", 78) to studentScores
ADD ("David", 95) to studentScores

SET maxEntry = null

FOR each entry in studentScores
    IF maxEntry is null OR entry.value > maxEntry.value
        SET maxEntry = entry
    ENDIF
ENDFOR

PRINT "Highest Scorer = " + maxEntry.key + " with score " + maxEntry.value

END
(2):
START

CREATE an empty map called studentScores

INSERT ("Alice", 85) into studentScores
INSERT ("Bob", 92) into studentScores
INSERT ("Charlie", 78) into studentScores
INSERT ("David", 95) into studentScores

SET maxStudent = ""
SET maxScore = -âˆž   // start with very small number

FOR each (student, score) in studentScores
    IF score > maxScore THEN
        SET maxScore = score
        SET maxStudent = student
    ENDIF
ENDFOR

PRINT "Highest Scorer = " + maxStudent + " with score " + maxScore

END


